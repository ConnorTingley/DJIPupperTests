NewtonianFrame N
RigidBody A,B
RigidFrame Arot, Brot

Variable qA'', qB''
Variable TA, TB
Variable Fx, Fy, Fz, Tx, Ty, Tz

Constant g = 9.81 m/s^2


%--------------------------------------------
% Mass and Inertia

A.SetMass(mA = 0.142 kg)
B.SetMass(mB = 0.106 kg)

A.SetInertia(Acm, Aixx=0.00014 kg*meter^2, Aiyy=0.00016 kg*meter^2, Aizz=3e-05 kg*meter^2, Aixy=0 kg*meter^2, Aiyz=0 kg*meter^2, Aixz=0 kg*meter^2)
B.SetInertia(Bcm, Bixx=2e-05 kg*meter^2, Biyy=6e-05 kg*meter^2, Bizz=6e-05 kg*meter^2, Bixy=0 kg*meter^2, Bixz=0 kg*meter^2, Biyz=0 kg*meter^2)


%A.SetMass(0.142)
%B.SetMass(0.106)

%A.SetInertia(Acm, 0.00014, 0.00016, 3e-05, 0, 0, 0)
%B.SetInertia(Bcm, 2e-05, 6e-05, 6e-05, 0, 0, 0)

%--------------------------------------------
% Rotations

%Arot.RotatePositiveX(N, PI/2)
%Arot2.RotateNegativeY(Arot, PI/2)
%A.RotateNegativeY( Arot2, qA )

Arot.RotatePositiveZ(N, PI/2)
A.RotatePositiveY( Arot, qA )

Brot.RotatePositiveX(A, PI/2)
B.RotatePositiveX( Brot, qB )

%--------------------------------------------
% Positions

Constant AcmX = 0.0139 m
Constant AcmY = 0.0254 m
Constant AcmZ = 0 m
Constant BoX = 0.0395 m
Constant BoY = 0.0265 m
Constant BoZ = 0 m
Constant BcmX = 0.0172 m
Constant BcmY = 0 m
Constant BcmZ = -0.061 m

Ao.Translate(No, 0>)
Acm.Translate(Ao, AcmX * Ax> + AcmY * Ay> + AcmZ * Az>)

Bo.Translate(Ao, BoX * Ax> + BoY * Ay> + BoZ * Az>)
Bcm.Translate(Bo, BcmX * Bx> + BcmY * By> + BcmZ * Bz>)

%-------------------------------------------- 
% Forces and Torques

System.AddForceGravity( -g*Nz> )

Ao.AddForce(Fx * Nx> + Fy * Ny> + Fz * Nz>)
A.AddTorque(Ty * Ny> + Tz * Nz>)

A.AddTorque(N, TA * Ay>)
B.AddTorque(A, TB * Bx>)

%-------------------------------------------- 
% Dynamics

SetGeneralizedSpeed(qA', qB')

%Dynamics = System.GetDynamicsKane()

Motors[1] = Dot(System(B).GetDynamics(Bo), Bx>)
Motors[2] = Dot(System.GetDynamics(Ao), Ay>)

Dynamics[1] = Dot(System.GetDynamics(Ao), Ny>)
Dynamics[2] = Dot(System.GetDynamics(Ao), Nz>)
Dynamics[3] = Dot(System.GetDynamics(), Nx>)
Dynamics[4] = Dot(System.GetDynamics(), Ny>)
Dynamics[5] = Dot(System.GetDynamics(), Nz>)

%-------------------------------------------- 
% Solve

Tx = -TA

Solve( Motors = 0, qA'', qB'')
Solve( Dynamics = 0, Fx, Fy, Fz, Ty, Tz)

